package com.doist.gradle.task

import com.doist.gradle.ext.create
import com.doist.gradle.ext.filterByBaseline
import com.doist.gradle.ext.readSetOfLines
import org.gradle.api.DefaultTask
import org.gradle.api.provider.ListProperty
import org.gradle.api.provider.Property
import org.gradle.api.tasks.Input
import org.gradle.api.tasks.InputFiles
import org.gradle.api.tasks.TaskAction
import java.io.File

abstract class WriteKotlinWarningBaselineTask : DefaultTask() {
    @get:Input
    abstract val warningPostfix: Property<String>

    @get:InputFiles
    abstract val warningFiles: ListProperty<File>

    @get:InputFiles
    abstract val baselineFiles: ListProperty<File>

    @TaskAction
    fun write() {
        val postfix = warningPostfix.get()
        val warningSet = warningFiles.get().readSetOfLines()
        baselineFiles.get().forEach { file ->
            val warnings = warningSet.filterByBaseline(file)
            file.takeIf { warnings.isNotEmpty() }?.run {
                val text = warnings.sorted().joinToString(
                    prefix = """
                        # This file was automatically generated by Kotlin Warning Baseline Plugin
                        # and should not be edited manually.


                    """.trimIndent(),
                    separator = "\n",
                    postfix = postfix
                )
                if (!exists()) {
                    println("create baseline file: $this")
                    create()
                    writeText(text)
                } else if (text != readText()) {
                    println("update baseline file: $this")
                    writeText(text)
                }
            }
        }
    }
}
